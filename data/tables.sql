-- -----------------------------------------------------
-- Schema book
-- -----------------------------------------------------
-- Par convention on va nommer toutes les tables au singulier, en minuscule et en anglais.
-- Chaque table contiendra un champs created_at contenant la date de création d'un enregistrement
-- Et un champ updated_at contenant la date de mise à jour de cet enregistrement
-- Création d'une transaction, c'est un groupe d' instruction SQL
-- qui rends celles-ci dépéndantes les unes des autres. 
-- Si au moins une des instructions génère une erreur, 
-- alors toutes les commandes sont invalidés
BEGIN;

-- Comme c'est un script de création de tables ont s'assure que celles-ci
-- Soit supprimées avant de les créées.
-- On peut supprimer plusieurs tables en même temps
DROP TABLE IF EXISTS "book",
"user",
"tag",
"role",
"permission",
"book_has_tag",
"user_has_role",
"role_has_permission";


-- -----------------------------------------------------
-- Table "book"
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS "book" (

  "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "title" text NOT NULL,
  "author" text NOT NULL,
  "description" text NOT NULL,
  "price" integer NOT NULL,
  "user_id" integer NOT NULL REFERENCES "user" ("id"),
  "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,--on peut utiliser now() aussi
  "updated_at" timestamptz
);


-- -----------------------------------------------------
-- Table "user"
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS "user" (
  "id" serial PRIMARY KEY,
  "email" text NOT NULL,
  "password" text NOT NULL,
  "firstname" text NULL,
  "lastname" text NULL,
  "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamptz
);


-- -----------------------------------------------------
-- Table "tag"
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS "tag" (
  "id" serial PRIMARY KEY,
  "name" text NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamptz
);

-- -----------------------------------------------------
-- Table "role"
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS "role" (
  "id" serial PRIMARY KEY,
  "name" text NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamptz
);



-- -----------------------------------------------------
-- Table "book_has_tag"
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS "book_has_tag" (
  "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "book_id" integer NOT NULL REFERENCES "book"("id"),
  "tag_id" integer NOT NULL REFERENCES "tag" ("id"),
  "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamptz,
  UNIQUE ("book_id", "tag_id")
);


-- Pour mettre fin à au bloc de transaction et l'exécuter
COMMIT;